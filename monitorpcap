# encoding: UTF-8
import pyinotify
import os
import re
import gzip
import tarfile
import shutil
import sys
from pcap_analysis import PcapHandler,w2log

class MyEventHandler(pyinotify.ProcessEvent):
    def process_IN_ACCESS(self, event):
        print "ACCESS event:", event.pathname

    def process_IN_ATTRIB(self, event):
        print "ATTRIB event:", event.pathname

    def process_IN_CLOSE_NOWRITE(self, event):
        print "CLOSE_NOWRITE event:", event.pathname

    def process_IN_CLOSE_WRITE(self, event):
        abs_file_name = event.pathname
        #正则判断是不是传来的抓包文件 解包出来的pcap后缀的不处理 也就是说直接上传的pcap包都不会处理
        #1C887950FC57-1478826408-00012-data.gz
        reg_pattern = re.compile(r'\w{12}\-\d{10}\-\d{5}\-data\.gz')
        if reg_pattern.match(event.name):
            try:
                gz = gzip.GzipFile(abs_file_name)
                #to tar
                tar_file_name = abs_file_name[:-2]+'tar'
                try:
                    open(tar_file_name,'w+').write(gz.read())
                except:
                    w2log('write tar file:'+str(sys.exc_info()[0]))
                
                #os.remove(abs_file_name)#delete gz file
                bk_dst = os.path.join('/pcapbk',event.name)
                shutil.move(abs_file_name,bk_dst)
                try:
                    tar = tarfile.open(tar_file_name)
                    names = tar.getnames()#['..pcap']
                    for name in names:
                        tar.extract(name,event.path)
                        pcap_file_name = os.path.join(event.path,name)
                        a = PcapHandler()
                        data = a.createDataFromPcapfile(pcap_file_name)
                        
                        os.remove(pcap_file_name)
                        print 'handled '+pcap_file_name
                    tar.close()
                except:
                    w2log('failt to open tar:'+str(tar_file_name))
                try:
                    os.remove(tar_file_name)
                except:
                    w2log('fail to remove tar:'+str(tar_file_name))
            except:
                w2log('file uploading:'+str(sys.exc_info()[0]))

    def process_IN_CREATE(self, event):
        print "CREATE event:", event.pathname

    def process_IN_DELETE(self, event):
        print "DELETE event:", event.pathname

    def process_IN_MODIFY(self, event):
        print "MODIFY event:", event.pathname

    def process_IN_OPEN(self, event):
        print "OPEN event:", event.pathname

def main():
    # watch manager
    wm = pyinotify.WatchManager()
    wm.add_watch('/pcap', pyinotify.ALL_EVENTS, rec=True)

    # event handler
    eh = MyEventHandler()

    # notifier
    notifier = pyinotify.Notifier(wm, eh)
    notifier.loop()

if __name__ == '__main__':
    main()