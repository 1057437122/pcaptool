# encoding: UTF-8
import pyinotify
import os
import re
import gzip
import tarfile
import shutil
import sys
from pcap_analysis import PcapHandler,w2log

class MyEventHandler(pyinotify.ProcessEvent):
    def process_IN_ACCESS(self, event):
        pass
        # print "ACCESS event:", event.pathname

    def process_IN_ATTRIB(self, event):
        pass
        # print "ATTRIB event:", event.pathname

    def process_IN_CLOSE_NOWRITE(self, event):
        print "CLOSE_NOWRITE event:", event.pathname

    def process_IN_CREATE(self, event):
        print "CREATE event:", event.pathname

    def process_IN_DELETE(self, event):
        print "DELETE event:", event.pathname

    def process_IN_MODIFY(self, event):
        pass
        # print "MODIFY event:", event.pathname

    def process_IN_OPEN(self, event):
        print "OPEN event:", event.pathname

    def process_IN_CLOSE_WRITE(self, event):
        print "CLOSE write event",event.pathname
        abs_file_name = event.pathname
        #正则判断是不是传来的抓包文件 解包出来的pcap后缀的不处理 也就是说直接上传的pcap包都不会处理
        #1C887950FC57-1478826408-00012-data.gz
        gz_reg_pattern = re.compile(r'\w{12}\-\d{10}\-\d{5}\-data\.gz')
        tar_reg_pattern  = re.compile(r'\w{12}\-\d{10}\-\d{5}\-data\.tar')
        pcap_reg_pattern = re.compile(r'\w{12}\-\d{10}\-\d{5}\-data\.pcap')
        if gz_reg_pattern.match(event.name):
            try:
                gz = gzip.GzipFile(mode='rb', fileobj=open(abs_file_name,'rb'))
                #to tar
                tar_file_name = abs_file_name[:-2]+'tar'
                try:
                    open(tar_file_name,'wb').write(gz.read())
                    bk_dst = os.path.join('/pcapbk',event.name)
                    shutil.move(abs_file_name,bk_dst)
                except:
                    w2log('write tar file:'+str(sys.exc_info()[0]))
                
            except:
                w2log('failt to gzip file:'+str(sys.exc_info()[0]))
        elif tar_reg_pattern.match( event.name ):
            w2log('now to handle tar file:'+str(event.name))
            #tar file 
            try:
                tar = tarfile.open( event.pathname )
                names = tar.getnames()#['abc.pcap','bcd.pca']
                for name in names:
                    tar.extract(name,event.path)
            except:
                w2log('extra tar file error:'+str(sys.exc_info()[0]))
        elif pcap_reg_pattern.match( event.name) :
            w2log('now to handle pcap file:'+str(event.pathname))
            try:
                a = PcapHandler()
                data = a.createDataFromPcapfile(event.pathname)
                os.remove(event.pathname)
                tar_file_name = event.pathname[:-4]+'tar'
                os.remove(tar_file_name)
            except:
                w2log('handle pcap file fail:'+str(sys.exc_info()[0]))

def main():
    # watch manager
    wm = pyinotify.WatchManager()
    wm.add_watch('/pcap', pyinotify.ALL_EVENTS, rec=True)

    # event handler
    eh = MyEventHandler()

    # notifier
    notifier = pyinotify.Notifier(wm, eh)
    notifier.loop()

if __name__ == '__main__':
    main()
